package docker

// MakeDefaultDockerfileForMe
//
// Similar:
//
//	MakeDefaultDockerfileForMe(), MakeDefaultDockerfileForMeWithInstallExtras()
//
// English:
//
//	Automatically mount the Dockerfile-iotmaker inside the target folder.
//
// Caution:
//
//   - The Dockerfile-iotmaker may be overwritten
//
// Rules:
//
//   - For Golang projects, the go.mod file is mandatory;
//   - The main.go file containing the main package must be at the root folder.
//
// Note:
//
//   - If there are ports exposed in the configurations, they will be defined automatically and the
//     same goes for volumes, where files shared between the host and the container will expose the
//     folder containing the file inside the container as volume;
//   - If you need a dockerfile made for another programming language, see the DockerfileAuto
//     interface and the SetDockerfileBuilder() function;
//   - If the image cache is enabled and image cahe is not found, the
//     MakeDefaultDockerfileForMeWithInstallExtras() function will be used. It will download git,
//     open-ssh and other tools necessary for the first part of the build in two steps;
//   - The tools downloaded in the first step of the build and the ssh and git credentials will be
//     discarded, only the binary generated by Golang will be transferred to the second image.
//
// Português:
//
//	Monta o arquivo Dockerfile-iotmaker dentro da pasta alvo de forma automática.
//
// Cuidado:
//
//   - O arquivo Dockerfile-iotmaker pode ser sobrescrito.
//
// Regras:
//
//   - Para projetos Golang, o arquivo go.mod é obrigatório;
//   - O arquivo main.go contendo o package main deve está na raiz do diretório.
//
// Nota:
//
//   - Caso haja portas expostas ou volumes nas configurações, as mesmas serão definidas
//     automaticamente, o mesmo serve para arquivos compartilhados entre o host e o container;
//   - Caso necessite de um dockerfile feito para outra linguagem de programação, veja a interface
//     DockerfileAuto e a função SetDockerfileBuilder();
//   - Caso a imagem cache esteja habilitada e não seja encontrada, será usada a função
//     MakeDefaultDockerfileForMeWithInstallExtras(), que baixará git, open-ssh e outras ferramentas
//     necessárias para a primeira parte do build em duas etapas;
//   - As ferramentas baixadas na primeira etapa do build e as credenciais ssh e git serão descartadas
//     e apenas o binário gerado pelo Golang será transferido para a segunda imagem.
func (e *ContainerBuilder) MakeDefaultDockerfileForMe() {

	if e.enableCache == true {

		// se a cache foi habilitada e não existe imagem cache, crie o dockerfile completo
		// isto foi feito devido a falhas nos testes com usuários
		var id string
		var dockerSys = DockerSystem{}
		_ = dockerSys.Init()
		id, _ = dockerSys.ImageFindIdByName(e.imageCacheName)
		if id == "" {
			e.imageInstallExtras = true
		}
	}

	e.makeDefaultDockerfile = true
}
